h1. Jzip

A Ruby gem for Javascript merging and compression using templates (like SASS)

h2. Introduction

Jzip was created due to the need of simply merging and minifying Javascript files to reduce HTTP requests and file size of my assets. Using sprites for images and SASS for stylesheets only left javascripts not be optimized. AssetPackager almost suited the solution, but I wanted more flexibility in configuration. So with AssetPackager (for minification) and SASS (for merging with templates) as inspiration, I came up with Jzip.

h2. Alternatives

Prior and after the first release of Jzip, there were / are other Javascript merging and minification libraries for all of us to use of course.

I *recommend* on taking a look at:

* "Jammit":http://documentcloud.github.com/jammit/
  An industrial strength asset packaging library for Rails built by "DocumentCloud":http://documentcloud.org/. Also well known for "BackboneJS":http://documentcloud.github.com/backbone/.
* "Sprockets":http://getsprockets.com/
  A Ruby library that preprocesses and concatenates JavaScript source files.

You can find more alternatives at "Ruby Toolbox":http://ruby-toolbox.com/categories/rails_asset_management.html.

h2. Major update

As of version 2.0.0, I have dropped the Rails support. So Jzip will not hook into a Rails application request anymore. You will have to build it yourself.

Also, I have introduced the Jzip CLI (command line interface) which can do the following:

* compile Jzip assets (using @jzip compile@)
* watch Jzip assets and compile them when changes are made (using @jzip watch@)

h2. Installation

h3. Using Bundler

Add Jzip in @Gemfile@ as a gem dependency:

<pre>
  gem "jzip"
</pre>

Run the following in your console to install with Bundler:

<pre>
  bundle install
</pre>

h2. Usage

h3. Creating Jzip templates / partials

A @.jz@ file (Jzip template or partial) is nothing more than a common .js file in which you can require other files for merging. You can do this by simply adding the following:

<pre>
  //= require < path_to_file or path_to_template or path_to_partial >
</pre>

Just like in SASS, Jzip has partials of which the output file will not be created in the target directory. The path to the Javascript file or Jzip template or partial has to be relative to the Jzip template / partial itself. Please note that specifying a preleading @/@ in the path will be interpreted by Jzip as @<root directory>/public/javascripts@ (which is very handy).

Other than the path to a Javascript file, you can also refer to a predefined set of Javascripts sources. At the moment, only @defaults@ is available for the Prototype and Scriptaculous libs. Any suggestions for other predefined sets are welcome.

The following instructs Jzip to merge the Prototype and Scriptaculous libraries with three custom Javascript files into @assets/foo.js@:

*Note*: template is located in @assets/jzip/foo.jz@

<pre>
  //= require /prototype
  //= require ext/underscore
  //= require ext/topup
  //= require foo/bar
</pre>

h3. Registering template locations

You probably already have guessed that the default location for Jzip templates is @<root directory>/assets/jzip@. I can imagine that you would have choosen another location. So fortunately, the Jzip engine offers you to that piece of freedom. All you have to do is put the following in a Ruby config file (e.g. @config/assets/jzip.rb@) which gets required:

<pre>
  Jzip::Engine.add_template_location < your_own_template_location(s) >
</pre>

Now isn't that a piece cake? Not only can you pass a @string@ containing the template location, you can also pass an @array of strings@ (containing multiple locations) or a @hash@ (which also specifies the output directory):

* @string@ - target directory will be @<root directory>/assets@

<pre>
  ROOT_DIR + "/lib/jzip
</pre>

* @array@ - target directory will be @<root directory>/assets@

<pre>
  [ROOT_DIR + "/some/path/jzip", path/to/your/jzip/templates]
</pre>

* @hash@ - target directory will @public/javascripts/your/target_directory@

<pre>
  {"path/to/your/jzip/templates" => ROOT_DIR + "/public/javascripts/your/target_directory"}
</pre>

h3. Minification

Finally, you can configure Jzip to minify the compiled Javascript source.

* @:minify@ - Minify the merged Javascript file using the JSMin library (default: false)

Put the following in a Ruby config file (e.g. @config/assets/jzip.rb@) which gets required:

<pre>
  Jzip::Engine.options[:minify] = true
</pre>

h3. Compiling Jzip templates

To compile Jzip templates, please call the following in Ruby code:

<pre>
  Jzip::Engine.compile
</pre>

Also, you can compile Jzip templates from the command line:

<pre>
  $ jzip compile
</pre>

h3. Watch Jzip templates and compile when changed

Just like SASS, you can let Jzip watch its templates and let it compile automatically when changes are made. Run the following in the command line:

<pre>
  $ jzip watch
</pre>

h2. Contact me

For support, remarks and requests please mail me at "paul.engel@holder.nl":mailto:paul.engel@holder.nl.

h2. Credit

This Ruby gem is inspired by:

AssetPackager<br>
"http://github.com/sbecker/asset_packager/tree/master":http://github.com/sbecker/asset_packager/tree/master

SASS<br>
"http://sass-lang.com":http://sass-lang.com

Also, the Jzip engine makes use of the Ruby JavaScript Minifier created by Douglas Crockford<br>
"http://www.crockford.com/javascript/jsmin.html":http://www.crockford.com/javascript/jsmin.html

h2. Contributors

Mark Mulder - "@bitterzoet":http://twitter.com/bitterzoet - "http://ikbenbitterzoet.com":http://ikbenbitterzoet.com
Johan Vermeulen - "@johpie":http://twitter.com/johpie - "http://www.prutz-lan.nl":http://www.prutz-lan.nl

h2. License

Copyright (c) 2012 Paul Engel, released under the MIT license

"http://holder.nl":http://holder.nl - "http://codehero.es":http://codehero.es - "http://gettopup.com":http://gettopup.com - "http://twitter.com/archan937":http://twitter.com/archan937 - "paul.engel@holder.nl":mailto:paul.engel@holder.nl

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.